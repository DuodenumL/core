// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	resources "github.com/projecteru2/core/resources"
	mock "github.com/stretchr/testify/mock"

	types "github.com/projecteru2/core/types"
)

// Plugin is an autogenerated mock type for the Plugin type
type Plugin struct {
	mock.Mock
}

// AddNode provides a mock function with given fields: ctx, nodeName, resourceOpts
func (_m *Plugin) AddNode(ctx context.Context, nodeName string, resourceOpts types.NodeResourceOpts) (*resources.AddNodeResponse, error) {
	ret := _m.Called(ctx, nodeName, resourceOpts)

	var r0 *resources.AddNodeResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, types.NodeResourceOpts) *resources.AddNodeResponse); ok {
		r0 = rf(ctx, nodeName, resourceOpts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resources.AddNodeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, types.NodeResourceOpts) error); ok {
		r1 = rf(ctx, nodeName, resourceOpts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FixNodeResource provides a mock function with given fields: ctx, nodeName, workloads
func (_m *Plugin) FixNodeResource(ctx context.Context, nodeName string, workloads []*types.Workload) (*resources.GetNodeResourceInfoResponse, error) {
	ret := _m.Called(ctx, nodeName, workloads)

	var r0 *resources.GetNodeResourceInfoResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, []*types.Workload) *resources.GetNodeResourceInfoResponse); ok {
		r0 = rf(ctx, nodeName, workloads)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resources.GetNodeResourceInfoResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, []*types.Workload) error); ok {
		r1 = rf(ctx, nodeName, workloads)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeployArgs provides a mock function with given fields: ctx, nodeName, deployCount, resourceOpts
func (_m *Plugin) GetDeployArgs(ctx context.Context, nodeName string, deployCount int, resourceOpts types.WorkloadResourceOpts) (*resources.GetDeployArgsResponse, error) {
	ret := _m.Called(ctx, nodeName, deployCount, resourceOpts)

	var r0 *resources.GetDeployArgsResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, int, types.WorkloadResourceOpts) *resources.GetDeployArgsResponse); ok {
		r0 = rf(ctx, nodeName, deployCount, resourceOpts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resources.GetDeployArgsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, int, types.WorkloadResourceOpts) error); ok {
		r1 = rf(ctx, nodeName, deployCount, resourceOpts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMostIdleNode provides a mock function with given fields: ctx, nodeNames
func (_m *Plugin) GetMostIdleNode(ctx context.Context, nodeNames []string) (*resources.GetMostIdleNodeResponse, error) {
	ret := _m.Called(ctx, nodeNames)

	var r0 *resources.GetMostIdleNodeResponse
	if rf, ok := ret.Get(0).(func(context.Context, []string) *resources.GetMostIdleNodeResponse); ok {
		r0 = rf(ctx, nodeNames)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resources.GetMostIdleNodeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, nodeNames)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNodeResourceInfo provides a mock function with given fields: ctx, nodeName, workloads
func (_m *Plugin) GetNodeResourceInfo(ctx context.Context, nodeName string, workloads []*types.Workload) (*resources.GetNodeResourceInfoResponse, error) {
	ret := _m.Called(ctx, nodeName, workloads)

	var r0 *resources.GetNodeResourceInfoResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, []*types.Workload) *resources.GetNodeResourceInfoResponse); ok {
		r0 = rf(ctx, nodeName, workloads)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resources.GetNodeResourceInfoResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, []*types.Workload) error); ok {
		r1 = rf(ctx, nodeName, workloads)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNodesDeployCapacity provides a mock function with given fields: ctx, nodeNames, resourceOpts
func (_m *Plugin) GetNodesDeployCapacity(ctx context.Context, nodeNames []string, resourceOpts types.WorkloadResourceOpts) (*resources.GetNodesDeployCapacityResponse, error) {
	ret := _m.Called(ctx, nodeNames, resourceOpts)

	var r0 *resources.GetNodesDeployCapacityResponse
	if rf, ok := ret.Get(0).(func(context.Context, []string, types.WorkloadResourceOpts) *resources.GetNodesDeployCapacityResponse); ok {
		r0 = rf(ctx, nodeNames, resourceOpts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resources.GetNodesDeployCapacityResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []string, types.WorkloadResourceOpts) error); ok {
		r1 = rf(ctx, nodeNames, resourceOpts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReallocArgs provides a mock function with given fields: ctx, nodeName, originResourceArgs, resourceOpts
func (_m *Plugin) GetReallocArgs(ctx context.Context, nodeName string, originResourceArgs types.WorkloadResourceArgs, resourceOpts types.WorkloadResourceOpts) (*resources.GetReallocArgsResponse, error) {
	ret := _m.Called(ctx, nodeName, originResourceArgs, resourceOpts)

	var r0 *resources.GetReallocArgsResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, types.WorkloadResourceArgs, types.WorkloadResourceOpts) *resources.GetReallocArgsResponse); ok {
		r0 = rf(ctx, nodeName, originResourceArgs, resourceOpts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resources.GetReallocArgsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, types.WorkloadResourceArgs, types.WorkloadResourceOpts) error); ok {
		r1 = rf(ctx, nodeName, originResourceArgs, resourceOpts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRemapArgs provides a mock function with given fields: ctx, nodeName, workloadMap
func (_m *Plugin) GetRemapArgs(ctx context.Context, nodeName string, workloadMap map[string]*types.Workload) (*resources.GetRemapArgsResponse, error) {
	ret := _m.Called(ctx, nodeName, workloadMap)

	var r0 *resources.GetRemapArgsResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]*types.Workload) *resources.GetRemapArgsResponse); ok {
		r0 = rf(ctx, nodeName, workloadMap)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resources.GetRemapArgsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, map[string]*types.Workload) error); ok {
		r1 = rf(ctx, nodeName, workloadMap)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Name provides a mock function with given fields:
func (_m *Plugin) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// RemoveNode provides a mock function with given fields: ctx, nodeName
func (_m *Plugin) RemoveNode(ctx context.Context, nodeName string) (*resources.RemoveNodeResponse, error) {
	ret := _m.Called(ctx, nodeName)

	var r0 *resources.RemoveNodeResponse
	if rf, ok := ret.Get(0).(func(context.Context, string) *resources.RemoveNodeResponse); ok {
		r0 = rf(ctx, nodeName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resources.RemoveNodeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, nodeName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetNodeResourceInfo provides a mock function with given fields: ctx, nodeName, resourceCapacity, resourceUsage
func (_m *Plugin) SetNodeResourceInfo(ctx context.Context, nodeName string, resourceCapacity types.NodeResourceArgs, resourceUsage types.NodeResourceArgs) (*resources.SetNodeResourceInfoResponse, error) {
	ret := _m.Called(ctx, nodeName, resourceCapacity, resourceUsage)

	var r0 *resources.SetNodeResourceInfoResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, types.NodeResourceArgs, types.NodeResourceArgs) *resources.SetNodeResourceInfoResponse); ok {
		r0 = rf(ctx, nodeName, resourceCapacity, resourceUsage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resources.SetNodeResourceInfoResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, types.NodeResourceArgs, types.NodeResourceArgs) error); ok {
		r1 = rf(ctx, nodeName, resourceCapacity, resourceUsage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNodeResourceCapacity provides a mock function with given fields: ctx, nodeName, resourceOpts, incr
func (_m *Plugin) UpdateNodeResourceCapacity(ctx context.Context, nodeName string, resourceOpts types.NodeResourceOpts, incr bool) (*resources.UpdateNodeResourceCapacityResponse, error) {
	ret := _m.Called(ctx, nodeName, resourceOpts, incr)

	var r0 *resources.UpdateNodeResourceCapacityResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, types.NodeResourceOpts, bool) *resources.UpdateNodeResourceCapacityResponse); ok {
		r0 = rf(ctx, nodeName, resourceOpts, incr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resources.UpdateNodeResourceCapacityResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, types.NodeResourceOpts, bool) error); ok {
		r1 = rf(ctx, nodeName, resourceOpts, incr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNodeResourceUsage provides a mock function with given fields: ctx, nodeName, resourceArgs, incr
func (_m *Plugin) UpdateNodeResourceUsage(ctx context.Context, nodeName string, resourceArgs []types.WorkloadResourceArgs, incr bool) (*resources.UpdateNodeResourceUsageResponse, error) {
	ret := _m.Called(ctx, nodeName, resourceArgs, incr)

	var r0 *resources.UpdateNodeResourceUsageResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, []types.WorkloadResourceArgs, bool) *resources.UpdateNodeResourceUsageResponse); ok {
		r0 = rf(ctx, nodeName, resourceArgs, incr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resources.UpdateNodeResourceUsageResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, []types.WorkloadResourceArgs, bool) error); ok {
		r1 = rf(ctx, nodeName, resourceArgs, incr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
